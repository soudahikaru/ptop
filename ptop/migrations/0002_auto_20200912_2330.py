# Generated by Django 3.0.3 on 2020-09-12 14:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ptop', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True, verbose_name='ファイル名')),
                ('description', models.CharField(max_length=200, null=True, verbose_name='説明')),
                ('file', models.FileField(upload_to='attachments/')),
                ('uploaded_datetime', models.DateTimeField(null=True, verbose_name='ファイル')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=30, verbose_name='デバイスID')),
                ('name', models.CharField(max_length=100, verbose_name='デバイス名称')),
            ],
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_code', models.CharField(max_length=100, verbose_name='エラーコード')),
                ('error_description', models.CharField(blank=True, max_length=200, null=True, verbose_name='エラー説明')),
            ],
        ),
        migrations.RenameField(
            model_name='user',
            old_name='expired_date',
            new_name='date_expired',
        ),
        migrations.RenameField(
            model_name='user',
            old_name='registered_date',
            new_name='date_joined',
        ),
        migrations.RemoveField(
            model_name='troubleevent',
            name='device_id',
        ),
        migrations.RemoveField(
            model_name='user',
            name='is_operator',
        ),
        migrations.AddField(
            model_name='troubleevent',
            name='reported_physicist',
            field=models.ForeignKey(blank=True, limit_choices_to=models.Q(('groups__name', 'Physicist'), ('is_active', True)), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='troubleevent_reported', to=settings.AUTH_USER_MODEL, verbose_name='報告した物理士'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='approval_operator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='troubleevent_approved', to=settings.AUTH_USER_MODEL, verbose_name='承認者'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='cause',
            field=models.TextField(blank=True, null=True, verbose_name='原因と状況'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='delay_flag',
            field=models.BooleanField(default=False, verbose_name='治療遅延の有無'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='delaytime',
            field=models.IntegerField(blank=True, null=True, verbose_name='治療遅延時間'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='description',
            field=models.TextField(null=True, verbose_name='内容'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='downtime',
            field=models.IntegerField(null=True, verbose_name='装置故障時間'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='end_time',
            field=models.DateTimeField(blank=True, null=True, verbose_name='復旧時刻'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='handling_operators',
            field=models.ManyToManyField(limit_choices_to=models.Q(('groups__name', 'Operator'), ('is_active', True)), to=settings.AUTH_USER_MODEL, verbose_name='対応者'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='input_operator',
            field=models.ForeignKey(limit_choices_to=models.Q(('groups__name', 'Operator'), ('is_active', True)), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='troubleevent_inputed', to=settings.AUTH_USER_MODEL, verbose_name='入力者'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='start_time',
            field=models.DateTimeField(null=True, verbose_name='発生時刻'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='temporary_action',
            field=models.TextField(blank=True, null=True, verbose_name='応急処置内容'),
        ),
        migrations.AlterField(
            model_name='troubleevent',
            name='title',
            field=models.CharField(max_length=200, verbose_name='トラブル名称'),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(blank=True, max_length=254, validators=[django.core.validators.EmailValidator('Invalid email address.')]),
        ),
        migrations.AlterField(
            model_name='user',
            name='phs_number',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.CreateModel(
            name='TroubleGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='トラブル分類名称')),
                ('classify_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='分類ID')),
                ('description', models.TextField(null=True, verbose_name='内容')),
                ('cause', models.TextField(blank=True, null=True, verbose_name='原因')),
                ('first_datetime', models.DateTimeField(blank=True, null=True, verbose_name='初発日時')),
                ('common_action', models.TextField(blank=True, null=True, verbose_name='主要な対処法')),
                ('causetype', models.CharField(blank=True, choices=[('CT_ACC', '偶発故障'), ('CT_DET', '経年劣化'), ('CT_OPE', 'オペミス'), ('CT_INI', '初期不良'), ('CT_DES', '設計不良'), ('CT_MAN', '製作不良')], max_length=20, null=True, verbose_name='原因の類型')),
                ('handling_status', models.CharField(blank=True, choices=[('HS_IGN', '放置可能'), ('HS_YET', '未対策'), ('HS_SEE', '様子見'), ('HS_WAT', '重点監視'), ('HS_AVO', '運用回避'), ('HS_VEN', 'メーカー依頼中'), ('HS_FIN', '解決済')], max_length=20, null=True, verbose_name='対処状況')),
                ('vendor_status', models.CharField(blank=True, choices=[('VS_NON', '連絡不要'), ('VS_YET', '未連絡'), ('VS_RWA', '連絡済み回答待ち'), ('VS_RPL', '連絡済み対処予定'), ('VS_RPL', '連絡済み様子見'), ('VS_FIN', '対処完了')], max_length=20, null=True, verbose_name='メーカー連絡状況')),
                ('reminder_datetime', models.DateField(blank=True, null=True, verbose_name='振り返り予定日')),
                ('permanent_action', models.TextField(blank=True, null=True, verbose_name='恒久対策の内容')),
                ('is_common_trouble', models.BooleanField(default=False, verbose_name='よくあるトラブルフラグ')),
                ('criticality_score', models.IntegerField(blank=True, null=True, verbose_name='FMEA致命度スコア')),
                ('frequency_score', models.IntegerField(blank=True, null=True, verbose_name='FMEA発生頻度スコア')),
                ('difficulty_score', models.IntegerField(blank=True, null=True, verbose_name='FMEA対応難度スコア')),
                ('path', models.CharField(blank=True, max_length=50, null=True, verbose_name='分類ツリー経路')),
                ('num_created_child', models.IntegerField(default=0, verbose_name='子Groupの数')),
                ('attachments', models.ManyToManyField(blank=True, to='ptop.Attachment', verbose_name='添付ファイル')),
                ('classify_operator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='troublegroup_classified', to=settings.AUTH_USER_MODEL, verbose_name='分類作成者')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ptop.Device', verbose_name='デバイスID')),
                ('errors', models.ManyToManyField(blank=True, null=True, to='ptop.Error', verbose_name='エラーメッセージ')),
            ],
        ),
        migrations.AddField(
            model_name='troubleevent',
            name='attachments',
            field=models.ManyToManyField(blank=True, to='ptop.Attachment', verbose_name='添付ファイル'),
        ),
        migrations.AddField(
            model_name='troubleevent',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ptop.Device', verbose_name='デバイス'),
        ),
        migrations.AddField(
            model_name='troubleevent',
            name='errors',
            field=models.ManyToManyField(blank=True, null=True, to='ptop.Error', verbose_name='エラーメッセージ'),
        ),
        migrations.AddField(
            model_name='troubleevent',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ptop.TroubleGroup', verbose_name='トラブル分類'),
        ),
    ]
